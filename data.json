[
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "white"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "red"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "green"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "yellow"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "green"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "yellow"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "green"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "yellow"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "green"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "yellow"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "green"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "yellow"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "green"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "yellow"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "green"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "yellow"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "green"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "yellow"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    },
    {
        "title": "Hello world",
        "date": "2017-11-11",
        "content": "作为一种解释型语言，Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。",
        "img": "static/img.png",
        "theme": "blue"
    }
]